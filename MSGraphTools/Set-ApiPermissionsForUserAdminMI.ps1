<#
              ____                                                                              
             6MMMMb\                                                                            
            6M'    `
            MM       ___  __     _____   ___  __ ___  __    ___      ____     _____   ___  __   
            YM.      `MM 6MMb   6MMMMMb  `MM 6MM `MM 6MM  6MMMMb    6MMMMb\  6MMMMMb  `MM 6MMb  
             YMMMMb   MMM9 `Mb 6M'   `Mb  MM69 "  MM69 " 8M'  `Mb  MM'    ` 6M'   `Mb  MMM9 `Mb 
                 `Mb  MM'   MM MM     MM  MM'     MM'        ,oMM  YM.      MM     MM  MM'   MM 
                  MM  MM    MM MM     MM  MM      MM     ,6MM9'MM   YMMMMb  MM     MM  MM    MM 
                  MM  MM    MM MM     MM  MM      MM     MM'   MM       `Mb MM     MM  MM    MM 
            L    ,M9  MM    MM YM.   ,M9  MM      MM     MM.  ,MM  L    ,MM YM.   ,M9  MM    MM 
            MYMMMM9  _MM_  _MM_ YMMMMM9  _MM_    _MM_    `YMMM9'Yb.MYMMMM9   YMMMMM9  _MM_  _MM_
                                                                                                
                                                                                                                                                                                                                              
                                                                                                                                    
                                                                                    
___       ___  ____      ____                               ___             __________                     ___         
`MMb     dMM' 6MMMMb\   6MMMMb/                             `MM             MMMMMMMMMM                     `MM         
 MMM.   ,PMM 6M'    `  8P    YM                              MM             /   MM   \                      MM         
 M`Mb   d'MM MM       6M      Y ___  __    ___    __ ____    MM  __             MM       _____     _____    MM   ____  
 M YM. ,P MM YM.      MM        `MM 6MM  6MMMMb   `M6MMMMb   MM 6MMb            MM      6MMMMMb   6MMMMMb   MM  6MMMMb\
 M `Mb d' MM  YMMMMb  MM         MM69 " 8M'  `Mb   MM'  `Mb  MMM9 `Mb           MM     6M'   `Mb 6M'   `Mb  MM MM'    `
 M  YM.P  MM      `Mb MM     ___ MM'        ,oMM   MM    MM  MM'   MM           MM     MM     MM MM     MM  MM YM.     
 M  `Mb'  MM       MM MM     `M' MM     ,6MM9'MM   MM    MM  MM    MM           MM     MM     MM MM     MM  MM  YMMMMb 
 M   YP   MM       MM YM      M  MM     MM'   MM   MM    MM  MM    MM           MM     MM     MM MM     MM  MM      `Mb
 M   `'   MM L    ,M9  8b    d9  MM     MM.  ,MM   MM.  ,M9  MM    MM           MM     YM.   ,M9 YM.   ,M9  MM L    ,MM
_M_      _MM_MYMMMM9    YMMMM9  _MM_    `YMMM9'Yb. MMYMMM9  _MM_  _MM_         _MM_     YMMMMM9   YMMMMM9  _MM_MYMMMM9 
                                                   MM                                                                  
                                                   MM                                                                  
                                                  _MM_                                                                 

(Header generated by https://www.kammerl.de/ascii/AsciiSignature.php - using georgi16)

.SYNOPSIS
  Grant API permissions for the User assigned identety in the destination tenant

.DESCRIPTION
  first the script makes hure you are running PowerShell 5.1 since this function is not supported in PowerShell 7 (December 2023)
  then it connects to Azure AD in the destination tenant

.PARAMETER MsiName
  Name of the user-assigned managed service identity.

.OUTPUTS
  Writes to console the API permissions for the User assigned identety in the destination tenant

.NOTES
  Version:        1.0
  Author:         Steen Snorrason
  Creation Date:  2023.12.20
  Purpose/Change: Initial script development
  
.EXAMPLE
  .\Set-ApiPermissionsForUserAdminMI.ps1 -MsiName "uami-name"
#>

#requires -Version 5.1

param (
    [Parameter(Mandatory=$true)]
    [string]$MsiName 
)

# Set Error Action Preference to Stop
$ErrorActionPreference = "Stop"

If ($PSVersionTable.PSVersion.Major -gt 5) {
    Write-Host "This script requires PowerShell 5.1" -ForegroundColor Red
    exit
}

# Connect to Azure AD in the destination tenant
## ToDo change the TenantID
$DestinationTenantId = "6c61ff57-5f40-4269-9672-400eb17aa27d" # Tenant ID - set this to your Tenant ID

# Make sure user is connected to AzureAD
try { 
    $var = Get-AzureADTenantDetail 
    Write-Host "You are loged into AzureAD (Microsoft Entra) " -ForegroundColor Green
    $var.DomainName # will display nothing
} 
   catch [Microsoft.Open.Azure.AD.CommonLibrary.AadNeedAuthenticationException] { 
    Write-Host "You're not connected to AzureAD" -ForegroundColor Yellow
    Write-Host "Please connect to AzureAD - using the Popup window" -ForegroundColor Yellow
    try {
        Connect-AzureAD -TenantId $DestinationTenantId 
    }
    catch {
        Write-Host "Failed to connect to Azure AD in the destination tenant"  -ForegroundColor Red
        Write-Host $_.Exception.Message  -ForegroundColor Red
        exit
    }
}



Write-Host "Connected to Azure AD in the destination tenant"  -ForegroundColor Green
# Graph API permissions to set / reduce to what is needed for the UserAdmin MI
<#
"Directory.ReadWrite.All"            # Allows the app to read and write data in your organization's directory, such as users, and groups, without a signed-in user.  Does not allow user or group deletion.
"Group.ReadWrite.All"                # Allows the app to create groups, read all group properties and memberships, update group properties and memberships, and delete groups. Also allows the app to read and write conversations. All of these operations can be performed by the app without a signed-in user.
"GroupMember.ReadWrite.All"          # Allows the app to list groups, read basic properties, read and update the membership of the groups this app has access to without a signed-in user. Group properties and owners cannot be updated and groups cannot be deleted.
"User.ReadWrite.All"                 # Allows the app to read and update user profiles without a signed in user.
"RoleManagement.ReadWrite.Directory" # Allows the app to read and manage the role-based access control (RBAC) settings for your company's directory, without a signed-in user. This includes instantiating directory roles and managing directory role membership, and reading directory role templates, directory roles and memberships.
#>

$Permissions = @(
    "Directory.ReadWrite.All"
    "GroupMember.ReadWrite.All"
    "User.ReadWrite.All"
)


# Don't change this. It is Microsoft Graph AppID
$GraphAppId = "00000003-0000-0000-c000-000000000000" 

try {
    $oMsi = (Get-AzureADServicePrincipal  -Filter "displayName eq '$MsiName'")
    $oGraphSpn = (Get-AzureADServicePrincipal -Filter "appId eq '$GraphAppId'")
}
catch {
    Write-Host "Failed to get the UserAssigned Managed Service Identity or the Microsoft Graph Service Principal"  -ForegroundColor Red
}

foreach ($Permission in $Permissions)
{
    try {
        $AppRole = $oGraphSpn.AppRoles | Where-Object {$_.Value -eq $Permission -and $_.AllowedMemberTypes -contains "Application"}
        New-AzureAdServiceAppRoleAssignment -ObjectId $oMsi.ObjectId -PrincipalId $oMsi.ObjectId -ResourceId $oGraphSpn.ObjectId -Id $AppRole.Id
    }
    catch {
        Write-Host "Failed to assign the AppRole $($AppRole.Value) to the UserAssigned Managed Service Identity" -ForegroundColor Red
    }
}
